// libkotfmod_Reflection.cpp: Provides enum->string functions

#include "libkotfmod.h"

dllx const char* lkf_enum_system_callback_reflection(double value) {
	switch (static_cast<eLKF_STUDIO_SYSTEM_CALLBACK>(value)) {
		case LKF_SYSTEM_CALLBACK_PREUPDATE: return "LKF_SYSTEM_CALLBACK_PREUPDATE";
		case LKF_SYSTEM_CALLBACK_POSTUPDATE: return "LKF_SYSTEM_CALLBACK_POSTUPDATE";
		case LKF_SYSTEM_CALLBACK_BANK_UNLOAD: return "LKF_SYSTEM_CALLBACK_BANK_UNLOAD";
		case LKF_SYSTEM_CALLBACK_LIVEUPDATE_CONNECTED: return "LKF_SYSTEM_CALLBACK_LIVEUPDATE_CONNECTED";
		case LKF_SYSTEM_CALLBACK_LIVEUPDATE_DISCONNECTED: return "LKF_SYSTEM_CALLBACK_LIVEUPDATE_DISCONNECTED";
		default: return "UNKNOWN";
	}
}

dllx const char* lkf_enum_event_instance_callback_reflection(double value) {
	switch (static_cast<eLKF_STUDIO_EVINST_CALLBACK>(value)) {
		case LKF_EVENT_CALLBACK_CREATED: return "LKF_EVENT_CALLBACK_CREATED";
		case LKF_EVENT_CALLBACK_DESTROYED: return "LKF_EVENT_CALLBACK_DESTROYED";
		case LKF_EVENT_CALLBACK_STARTING: return "LKF_EVENT_CALLBACK_STARTING";
		case LKF_EVENT_CALLBACK_STARTED: return "LKF_EVENT_CALLBACK_STARTED";
		case LKF_EVENT_CALLBACK_RESTARTED: return "LKF_EVENT_CALLBACK_RESTARTED";
		case LKF_EVENT_CALLBACK_STOPPED: return "LKF_EVENT_CALLBACK_STOPPED";
		case LKF_EVENT_CALLBACK_START_FAILED: return "LKF_EVENT_CALLBACK_START_FAILED";
		case LKF_EVENT_CALLBACK_CREATE_PROGRAMMER_SOUND: return "LKF_EVENT_CALLBACK_CREATE_PROGRAMMER_SOUND";
		case LKF_EVENT_CALLBACK_DESTROY_PROGRAMMER_SOUND: return "LKF_EVENT_CALLBACK_DESTROY_PROGRAMMER_SOUND";
		case LKF_EVENT_CALLBACK_PLUGIN_CREATED: return "LKF_EVENT_CALLBACK_PLUGIN_CREATED";
		case LKF_EVENT_CALLBACK_PLUGIN_DESTROYED: return "LKF_EVENT_CALLBACK_PLUGIN_DESTROYED";
		case LKF_EVENT_CALLBACK_TIMELINE_MARKER: return "LKF_EVENT_CALLBACK_TIMELINE_MARKER";
		case LKF_EVENT_CALLBACK_TIMELINE_BEAT: return "LKF_EVENT_CALLBACK_TIMELINE_BEAT";
		case LKF_EVENT_CALLBACK_SOUND_PLAYED: return "LKF_EVENT_CALLBACK_SOUND_PLAYED";
		case LKF_EVENT_CALLBACK_SOUND_STOPPED: return "LKF_EVENT_CALLBACK_SOUND_STOPPED";
		case LKF_EVENT_CALLBACK_REAL_TO_VIRTUAL: return "LKF_EVENT_CALLBACK_REAL_TO_VIRTUAL";
		case LKF_EVENT_CALLBACK_VIRTUAL_TO_REAL: return "LKF_EVENT_CALLBACK_VIRTUAL_TO_REAL";
		case LKF_EVENT_CALLBACK_START_EVENT_COMMAND: return "LKF_EVENT_CALLBACK_START_EVENT_COMMAND";
		default: return "UNKNOWN";
	}
}

dllx const char* lkf_enum_result_reflection(double value) {
	switch (static_cast<eLKF_RESULT>(value)) {
		case LKF_ERR_INVALID_INDEX: return "LKF_ERR_INVALID_INDEX";
		case LKF_ERR_BADCOMMAND: return "LKF_ERR_BADCOMMAND";
		case LKF_ERR_CHANNEL_ALLOC: return "LKF_ERR_CHANNEL_ALLOC";
		case LKF_ERR_CHANNEL_STOLEN: return "LKF_ERR_CHANNEL_STOLEN";
		case LKF_ERR_DMA: return "LKF_ERR_DMA";
		case LKF_ERR_DSP_CONNECTION: return "LKF_ERR_DSP_CONNECTION";
		case LKF_ERR_DSP_DONTPROCESS: return "LKF_ERR_DSP_DONTPROCESS";
		case LKF_ERR_DSP_FORMAT: return "LKF_ERR_DSP_FORMAT";
		case LKF_ERR_DSP_INUSE: return "LKF_ERR_DSP_INUSE";
		case LKF_ERR_DSP_NOTFOUND: return "LKF_ERR_DSP_NOTFOUND";
		case LKF_ERR_DSP_RESERVED: return "LKF_ERR_DSP_RESERVED";
		case LKF_ERR_DSP_SILENCE: return "LKF_ERR_DSP_SILENCE";
		case LKF_ERR_DSP_TYPE: return "LKF_ERR_DSP_TYPE";
		case LKF_ERR_FILE_BAD: return "LKF_ERR_FILE_BAD";
		case LKF_ERR_FILE_COULDNOTSEEK: return "LKF_ERR_FILE_COULDNOTSEEK";
		case LKF_ERR_FILE_DISKEJECTED: return "LKF_ERR_FILE_DISKEJECTED";
		case LKF_ERR_FILE_EOF: return "LKF_ERR_FILE_EOF";
		case LKF_ERR_FILE_ENDOFDATA: return "LKF_ERR_FILE_ENDOFDATA";
		case LKF_ERR_FILE_NOTFOUND: return "LKF_ERR_FILE_NOTFOUND";
		case LKF_ERR_FORMAT: return "LKF_ERR_FORMAT";
		case LKF_ERR_HEADER_MISMATCH: return "LKF_ERR_HEADER_MISMATCH";
		case LKF_ERR_HTTP: return "LKF_ERR_HTTP";
		case LKF_ERR_HTTP_ACCESS: return "LKF_ERR_HTTP_ACCESS";
		case LKF_ERR_HTTP_PROXY_AUTH: return "LKF_ERR_HTTP_PROXY_AUTH";
		case LKF_ERR_HTTP_SERVER_ERROR: return "LKF_ERR_HTTP_SERVER_ERROR";
		case LKF_ERR_HTTP_TIMEOUT: return "LKF_ERR_HTTP_TIMEOUT";
		case LKF_ERR_INITIALIZATION: return "LKF_ERR_INITIALIZATION";
		case LKF_ERR_INITIALIZED: return "LKF_ERR_INITIALIZED";
		case LKF_ERR_INTERNAL: return "LKF_ERR_INTERNAL";
		case LKF_ERR_INVALID_FLOAT: return "LKF_ERR_INVALID_FLOAT";
		case LKF_ERR_INVALID_HANDLE: return "LKF_ERR_INVALID_HANDLE";
		case LKF_ERR_INVALID_PARAM: return "LKF_ERR_INVALID_PARAM";
		case LKF_ERR_INVALID_POSITION: return "LKF_ERR_INVALID_POSITION";
		case LKF_ERR_INVALID_SPEAKER: return "LKF_ERR_INVALID_SPEAKER";
		case LKF_ERR_INVALID_SYNCPOINT: return "LKF_ERR_INVALID_SYNCPOINT";
		case LKF_ERR_INVALID_THREAD: return "LKF_ERR_INVALID_THREAD";
		case LKF_ERR_INVALID_VECTOR: return "LKF_ERR_INVALID_VECTOR";
		case LKF_ERR_MAXAUDIBLE: return "LKF_ERR_MAXAUDIBLE";
		case LKF_ERR_MEMORY: return "LKF_ERR_MEMORY";
		case LKF_ERR_MEMORY_CANTPOINT: return "LKF_ERR_MEMORY_CANTPOINT";
		case LKF_ERR_NEEDS3D: return "LKF_ERR_NEEDS3D";
		case LKF_ERR_NEEDSHARDWARE: return "LKF_ERR_NEEDSHARDWARE";
		case LKF_ERR_NET_CONNECT: return "LKF_ERR_NET_CONNECT";
		case LKF_ERR_NET_SOCKET_ERROR: return "LKF_ERR_NET_SOCKET_ERROR";
		case LKF_ERR_NET_URL: return "LKF_ERR_NET_URL";
		case LKF_ERR_NET_WOULD_BLOCK: return "LKF_ERR_NET_WOULD_BLOCK";
		case LKF_ERR_NOTREADY: return "LKF_ERR_NOTREADY";
		case LKF_ERR_OUTPUT_ALLOCATED: return "LKF_ERR_OUTPUT_ALLOCATED";
		case LKF_ERR_OUTPUT_CREATEBUFFER: return "LKF_ERR_OUTPUT_CREATEBUFFER";
		case LKF_ERR_OUTPUT_DRIVERCALL: return "LKF_ERR_OUTPUT_DRIVERCALL";
		case LKF_ERR_OUTPUT_FORMAT: return "LKF_ERR_OUTPUT_FORMAT";
		case LKF_ERR_OUTPUT_INIT: return "LKF_ERR_OUTPUT_INIT";
		case LKF_ERR_OUTPUT_NODRIVERS: return "LKF_ERR_OUTPUT_NODRIVERS";
		case LKF_ERR_PLUGIN: return "LKF_ERR_PLUGIN";
		case LKF_ERR_PLUGIN_MISSING: return "LKF_ERR_PLUGIN_MISSING";
		case LKF_ERR_PLUGIN_RESOURCE: return "LKF_ERR_PLUGIN_RESOURCE";
		case LKF_ERR_PLUGIN_VERSION: return "LKF_ERR_PLUGIN_VERSION";
		case LKF_ERR_RECORD: return "LKF_ERR_RECORD";
		case LKF_ERR_REVERB_CHANNELGROUP: return "LKF_ERR_REVERB_CHANNELGROUP";
		case LKF_ERR_REVERB_INSTANCE: return "LKF_ERR_REVERB_INSTANCE";
		case LKF_ERR_SUBSOUNDS: return "LKF_ERR_SUBSOUNDS";
		case LKF_ERR_SUBSOUND_ALLOCATED: return "LKF_ERR_SUBSOUND_ALLOCATED";
		case LKF_ERR_SUBSOUND_CANTMOVE: return "LKF_ERR_SUBSOUND_CANTMOVE";
		case LKF_ERR_TAGNOTFOUND: return "LKF_ERR_TAGNOTFOUND";
		case LKF_ERR_TOOMANYCHANNELS: return "LKF_ERR_TOOMANYCHANNELS";
		case LKF_ERR_TRUNCATED: return "LKF_ERR_TRUNCATED";
		case LKF_ERR_UNIMPLEMENTED: return "LKF_ERR_UNIMPLEMENTED";
		case LKF_ERR_UNINITIALIZED: return "LKF_ERR_UNINITIALIZED";
		case LKF_ERR_UNSUPPORTED: return "LKF_ERR_UNSUPPORTED";
		case LKF_ERR_VERSION: return "LKF_ERR_VERSION";
		case LKF_ERR_EVENT_ALREADY_LOADED: return "LKF_ERR_EVENT_ALREADY_LOADED";
		case LKF_ERR_EVENT_LIVEUPDATE_BUSY: return "LKF_ERR_EVENT_LIVEUPDATE_BUSY";
		case LKF_ERR_EVENT_LIVEUPDATE_MISMATCH: return "LKF_ERR_EVENT_LIVEUPDATE_MISMATCH";
		case LKF_ERR_EVENT_LIVEUPDATE_TIMEOUT: return "LKF_ERR_EVENT_LIVEUPDATE_TIMEOUT";
		case LKF_ERR_EVENT_NOTFOUND: return "LKF_ERR_EVENT_NOTFOUND";
		case LKF_ERR_STUDIO_UNINITIALIZED: return "LKF_ERR_STUDIO_UNINITIALIZED";
		case LKF_ERR_STUDIO_NOT_LOADED: return "LKF_ERR_STUDIO_NOT_LOADED";
		case LKF_ERR_INVALID_STRING: return "LKF_ERR_INVALID_STRING";
		case LKF_ERR_ALREADY_LOCKED: return "LKF_ERR_ALREADY_LOCKED";
		case LKF_ERR_NOT_LOCKED: return "LKF_ERR_NOT_LOCKED";
		case LKF_ERR_RECORD_DISCONNECTED: return "LKF_ERR_RECORD_DISCONNECTED";
		case LKF_ERR_TOOMANYSAMPLES: return "LKF_ERR_TOOMANYSAMPLES";
		case LKF_ERR_MAX: return "LKF_ERR_MAX";
		default: return "UNKNOWN";
	}
}